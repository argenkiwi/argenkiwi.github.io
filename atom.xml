<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Binary Spells</title>
  <subtitle>A blog about coding</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://soflete.github.io/"/>
  <updated>2017-07-01T06:00:36.000Z</updated>
  <id>http://soflete.github.io/</id>
  
  <author>
    <name>Leandro Peralta</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android: Unit Testing Presenters</title>
    <link href="http://soflete.github.io/2017/07/01/Android-Unit-Testing-Presenters/"/>
    <id>http://soflete.github.io/2017/07/01/Android-Unit-Testing-Presenters/</id>
    <published>2017-07-01T04:53:37.000Z</published>
    <updated>2017-07-01T06:00:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the third post of a series. In the <a href="http://soflete.github.io/2017/07/01/Android-MVP-with-Dagger/">first post</a> I demonstrate how to setup the <em>View</em> and the <em>Presenter</em> of a <em>Model-View-Presenter</em> architecture using <em>dependency injection</em>. In the <a href="http://soflete.github.io/2017/07/01/Interactors-with-Retrofit-and-RxJava/">second post</a> I describe how to put together an <em>Interactor</em> and inject it into the <em>Presenter</em>.</p>
<p>In this post I would like to show you how I apply <em>TDD (Test Driven Development)</em> to define and implement the interactions of the <em>Presenter</em> with the <em>View</em> and the <em>Interactor</em>.</p>
<h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><p>In order to execute Unit Tests in <em>Android Studio</em> you need to make sure you have a <code>src/test</code> folder. Also, you need to include dependencies on <em>JUnit</em> and <em>Mockito</em> in your application’s <code>build.gradle</code> file.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    ...</div><div class="line">    testCompile <span class="string">'junit:junit:4.12'</span>                      </div><div class="line">    testCompile <span class="string">'org.mockito:mockito-core:2.8.47'</span> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="The-Unit-Test"><a href="#The-Unit-Test" class="headerlink" title="The Unit Test"></a>The Unit Test</h2><p>When you do <em>TDD</em> you start by writing a test and making sure it fails. In this case, we are writing tests for the <em>Presenter</em> we created in the previous articles.</p>
<p><strong>Note:</strong> If you are using <em>Android Studio</em> you can place your cursor on <code>MainPresenter</code>, press <code>Alt+Enter</code> and select the <code>Create Test</code> option. Make sure to save the test in the <code>src/test</code> folder.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(MockitoJUnitRunner.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainPresenterTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> MainPresenter presenter;</div><div class="line"></div><div class="line">    <span class="meta">@Mock</span></div><div class="line">    <span class="keyword">private</span> MainView view;</div><div class="line"></div><div class="line">    <span class="meta">@Mock</span></div><div class="line">    <span class="keyword">private</span> GetNewsInteractor interactor;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        presenter = <span class="keyword">new</span> MainPresenter(view, interactor);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// <span class="doctag">TODO:</span> Your tests here.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The <code>setUp()</code> method creates an instance of <code>MainPresenter</code> before running each test. For that we need to <em>Mock</em> <code>MainView</code> and <code>GetNewsInteractor</code>. The <code>@RunWith(MockitoJUnitRunner.class)</code> annotation makes sure the fields marked with the @Mock annotation are initialised before running each test.</p>
<p>We are now ready to write our first test. We would like to ensure <code>MainPresenter</code> attempts to load some news when the view is created.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.Mockito.verify;</div><div class="line"></div><div class="line"><span class="meta">@RunWith</span>(MockitoJUnitRunner.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainPresenterTest</span> </span>&#123;</div><div class="line">    ...    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldGetNews</span><span class="params">()</span></span>&#123;</div><div class="line">        presenter.onViewCreated();</div><div class="line">        verify(interactor).execute(</div><div class="line">                ArgumentMatchers.&lt;Consumer&lt;NewsGeonetResponse&gt;&gt;any(),</div><div class="line">                ArgumentMatchers.&lt;Consumer&lt;Throwable&gt;&gt;any()</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Mockito.verify()</code> makes sure the methods of a <em>Mock</em> are being executed and that the expected parameters are passed to them. If you try to run this test, you will get a compile time error.</p>
<p>By writing this test we realise we need to add an <code>onViewCreated</code> method to our <code>MainPresenter</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainPresenter</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MainView view;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> GetNewsInteractor interactor;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainPresenter</span><span class="params">(MainView view, GetNewsInteractor interactor)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.view = view;</div><div class="line">        <span class="keyword">this</span>.interactor = interactor;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewCreated</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>If we run the test again this time, it will tell us <code>interactor.execute(presenter)</code> hasn’t been executed. This is great, we’ve just applied the first step of <em>TDD</em>: we made our test fail. Let’s move on to getting our test to pass by implementing the <code>onViewCreated</code> method of <code>MainPresenter</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainPresenter</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewCreated</span><span class="params">()</span> </span>&#123;</div><div class="line">        interactor.execute(<span class="keyword">new</span> Consumer&lt;NewsGeonetResponse&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(@NonNull NewsGeonetResponse newsGeonetResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="comment">// TODO Show news.</span></div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="keyword">new</span> Consumer&lt;Throwable&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(@NonNull Throwable throwable)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="comment">// TODO Handle error.</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>If everything went as expected, our test should now pass. Easy, right? Now we want to make sure we show the news when they finish loading.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(MockitoJUnitRunner.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainPresenterTest</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="meta">@Captor</span></div><div class="line">    <span class="keyword">private</span> ArgumentCaptor&lt;Consumer&lt;NewsGeonetResponse&gt;&gt; newsConsumerCaptor;</div><div class="line"></div><div class="line">    ...</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldShowNews</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        NewsStory[] stories = <span class="keyword">new</span> NewsStory[]&#123;&#125;;</div><div class="line">        NewsGeonetResponse response = <span class="keyword">new</span> NewsGeonetResponse(stories);</div><div class="line"></div><div class="line">        presenter.onViewCreated();</div><div class="line">        verify(interactor).execute(</div><div class="line">                newsConsumerCaptor.capture(),</div><div class="line">                ArgumentMatchers.&lt;Consumer&lt;Throwable&gt;&gt;any()</div><div class="line">        );</div><div class="line"></div><div class="line">        newsConsumerCaptor.getValue().accept(response);</div><div class="line">        verify(view).showNews(stories);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Again, if we run our test now it will fail because we still haven’t implemented the <code>showNews</code> method. <code>MainView</code> should look as follows:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MainView</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showNews</span><span class="params">(NewsStory[] newsStories)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Make sure <code>MainFragment</code> implements the new method of the <code>MainView</code> interface and run the test again. It should still fail. It is time to update <code>MainPresenter</code> to make the test pass.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainPresenter</span> <span class="keyword">implements</span> <span class="title">Observer</span>&lt;<span class="title">NewsGeonetResponse</span>&gt; </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewCreated</span><span class="params">()</span> </span>&#123;</div><div class="line">        interactor.execute(<span class="keyword">new</span> Consumer&lt;NewsGeonetResponse&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(@NonNull NewsGeonetResponse newsGeonetResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                view.showNews(newsGeonetResponse.getNewsStories());</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="keyword">new</span> Consumer&lt;Throwable&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(@NonNull Throwable throwable)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="comment">// TODO Handle error.</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The test should pass now. If so, well done!</p>
<p>If you got this far, I can safely assume you are a smart reader and you already understood how the process works. So I’ll skip the explanations and write a few more tests.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(MockitoJUnitRunner.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainPresenterTest</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="meta">@Captor</span></div><div class="line">    <span class="keyword">private</span> ArgumentCaptor&lt;Consumer&lt;Throwable&gt;&gt; throwableConsumerCaptor;</div><div class="line"></div><div class="line">    ...</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldShowError</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        presenter.onViewCreated();</div><div class="line">        verify(interactor).execute(</div><div class="line">                ArgumentMatchers.&lt;Consumer&lt;NewsGeonetResponse&gt;&gt;any(),</div><div class="line">                throwableConsumerCaptor.capture()</div><div class="line">        );</div><div class="line"></div><div class="line">        throwableConsumerCaptor.getValue().accept(<span class="keyword">new</span> Throwable());</div><div class="line">        verify(view).showError();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldCancel</span><span class="params">()</span></span>&#123;</div><div class="line">        presenter.onDestroyView();</div><div class="line">        verify(interactor).cancel();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Iff there is an error, I want to display an error message. Also, when the view is about to be destroyed, I want to cancel the request in case it is still pending. If you apply the steps we described before, <code>MainView</code> should now look as follows.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MainView</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hideLoading</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showError</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>If you managed to make your tests pass, <code>MainPresenter</code> should be resemble the following:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainPresenter</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MainView view;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> GetNewsInteractor interactor;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainPresenter</span><span class="params">(MainView view, GetNewsInteractor interactor)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.view = view;</div><div class="line">        <span class="keyword">this</span>.interactor = interactor;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewCreated</span><span class="params">()</span> </span>&#123;</div><div class="line">        interactor.execute(<span class="keyword">new</span> Consumer&lt;NewsGeonetResponse&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(@NonNull NewsGeonetResponse newsGeonetResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                view.showNews(newsGeonetResponse.getNewsStories());</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="keyword">new</span> Consumer&lt;Throwable&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(@NonNull Throwable throwable)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                view.showError();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroyView</span><span class="params">()</span> </span>&#123;</div><div class="line">        interactor.cancel();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Finally, <code>MainFragment</code> should also have a new empty method.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> <span class="keyword">implements</span> <span class="title">MainView</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    MainPresenter presenter;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        AndroidSupportInjection.inject(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">super</span>.onAttach(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showNews</span><span class="params">(NewsStory[] stories)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showError</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>By writing <em>Unit Tests</em> for our <em>Presenter</em> first, we can test and implement the behaviour of our application without writing a single line of UI code. This allows us to focus on one aspect of our application at a time. Also, our feedback loop shortens as we don’t need to deploy our application to a device or an emulator to verify it is doing the right thing. Implementing the methods in our <em>View</em> should be trivial, given each of them fulfills a very specific purpose as a byproduct of applying both <em>TDD</em> and <em>MVP</em>.</p>
<p>This concludes my series of articles on the <em>Mode-View-Presenter</em> architecture and <em>Test Driven Development</em> applied to <em>Android</em>. I hope some of these ideas help you make your development process more enjoyable.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the third post of a series. In the &lt;a href=&quot;http://soflete.github.io/2017/07/01/Android-MVP-with-Dagger/&quot;&gt;first post&lt;/a&gt; I demons
    
    </summary>
    
    
      <category term="Android" scheme="http://soflete.github.io/tags/Android/"/>
    
      <category term="MVP" scheme="http://soflete.github.io/tags/MVP/"/>
    
      <category term="Unit Testing" scheme="http://soflete.github.io/tags/Unit-Testing/"/>
    
      <category term="TDD" scheme="http://soflete.github.io/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title>Android: Interactors with Retrofit and RxJava</title>
    <link href="http://soflete.github.io/2017/07/01/Interactors-with-Retrofit-and-RxJava/"/>
    <id>http://soflete.github.io/2017/07/01/Interactors-with-Retrofit-and-RxJava/</id>
    <published>2017-07-01T03:24:55.000Z</published>
    <updated>2017-07-01T06:00:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>In a <a href="http://soflete.github.io/2017/07/01/Android-MVP-with-Dagger/">previous article</a> I described how to structure your application under the <em>Model-View-Presenter</em> architecture applying dependency injection with <a href="http://google.github.io/dagger/" target="_blank" rel="external">Dagger</a>. I covered how to setup a <em>View</em> and its <em>Presenter</em>. Today I would like to share with you how to use an <em>Interactor</em> to communicate the <em>Presenter</em> with the <em>Model</em>.</p>
<h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><p>For this example, I am going to introduce <a href="http://square.github.io/retrofit/" target="_blank" rel="external">Retrofit</a>, a networking library that makes it easy to define endpoints from which to retrieve data from the network. Also, I will make use of <a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="external">RxJava</a> (and <a href="https://github.com/ReactiveX/RxAndroid" target="_blank" rel="external">RxAndroid</a>) to handle asynchronous requests. Let’s begin by updating the dependencies in our application’s <code>build.gradle</code> file.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    ...</div><div class="line">    <span class="comment">// Retrofit</span></div><div class="line">    compile <span class="string">'com.squareup.retrofit2:retrofit:2.3.0'</span></div><div class="line">    compile <span class="string">'com.squareup.retrofit2:adapter-rxjava:2.3.0'</span></div><div class="line">    compile <span class="string">'com.squareup.retrofit2:converter-gson:2.3.0'</span></div><div class="line"></div><div class="line">    <span class="comment">// RxAndroid and RxJava</span></div><div class="line">    compile <span class="string">'io.reactivex.rxjava2:rxandroid:2.0.1'</span></div><div class="line">    compile <span class="string">'io.reactivex.rxjava2:rxjava:2.1.1'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>We added an <em>RxJava</em> adapter to enable <em>Retrofit</em> to return <code>Single</code> objects from its <em>Services</em>. We included the <em>Gson</em> converter only because the endpoint we are going to use in this example returns responses in the <em>JSON</em> format.</p>
<h2 id="The-Retrofit-Service"><a href="#The-Retrofit-Service" class="headerlink" title="The Retrofit Service"></a>The Retrofit Service</h2><p>Let’s say we want to list the latest news from <a href="http://www.geonet.org.nz/" target="_blank" rel="external">Geonet</a>, a geological hazard monitoring system from New Zealand. The response we get from <a href="http://api.geonet.org.nz/news/geonet" target="_blank" rel="external">http://api.geonet.org.nz/news/geonet</a> looks similar to this:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"feed"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"title"</span>: <span class="string">"February 2016 landslides"</span>,</div><div class="line">      <span class="attr">"published"</span>: <span class="string">"2016-03-22T02:38:15Z"</span>,</div><div class="line">      <span class="attr">"link"</span>: <span class="string">"http://info.geonet.org.nz/display/slide/2016/03/22/February+2016+landslides"</span>,</div><div class="line">      <span class="attr">"mlink"</span>: <span class="string">"http://info.geonet.org.nz/m/view-rendered-page.action?abstractPageId=17039668"</span></div><div class="line">    &#125;,</div><div class="line">    ...</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>So let’s create a class to represent a <em>News Story</em>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewsStory</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@SerializedName</span>(<span class="string">"title"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String title;</div><div class="line"></div><div class="line">    <span class="meta">@SerializedName</span>(<span class="string">"published"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Date published;</div><div class="line"></div><div class="line">    <span class="meta">@SerializedName</span>(<span class="string">"mlink"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String url;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NewsStory</span><span class="params">(String title, Date published, String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.title = title;</div><div class="line">        <span class="keyword">this</span>.published = published;</div><div class="line">        <span class="keyword">this</span>.url = url;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> title;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getPublished</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> published;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> url;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>And another one to represent the response from the service which contains the news feed.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewsGeonetResponse</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@SerializedName</span>(<span class="string">"feed"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> NewsStory[] newsStories;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NewsGeonetResponse</span><span class="params">(NewsStory[] newsStories)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.newsStories = newsStories;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> NewsStory[] getNewsStories() &#123;</div><div class="line">        <span class="keyword">return</span> newsStories;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>We are now ready to define our <em>Service</em>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GeonetService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@GET</span>(<span class="string">"news/geonet"</span>)</div><div class="line">    <span class="function">Single&lt;NewsGeonetResponse&gt; <span class="title">getNews</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="The-Interactor"><a href="#The-Interactor" class="headerlink" title="The Interactor"></a>The Interactor</h2><p>To shield our <em>Presenter</em> from the specifics of <em>Retrofit</em> we are going to create an <em>Interactor</em>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetNewsInteractor</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> GeonetService service;</div><div class="line">    <span class="keyword">private</span> Disposable disposable;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GetNewsInteractor</span><span class="params">(GeonetService service)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(</span></span></div><div class="line">            Consumer&lt;? <span class="keyword">super</span> NewsGeonetResponse&gt; onSuccess,</div><div class="line">            Consumer&lt;? <span class="keyword">super</span> Throwable&gt; onError</div><div class="line">    ) &#123;</div><div class="line">        disposable = service.getNews()</div><div class="line">                .subscribeOn(Schedulers.io())</div><div class="line">                .observeOn(AndroidSchedulers.mainThread())</div><div class="line">                .subscribe(onSuccess, onError);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (disposable != <span class="keyword">null</span>) disposable.dispose();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>GetNewsInteractor</code> executes a request on a separate thread and returns its response into the main thread (or UI thread). It also holds a subscription to the request that can be canceled at any time.</p>
<p>Let’s add a reference to <code>GetNewsInteractor</code> into our <em>Presenter</em>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainPresenter</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MainView view;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> GetNewsInteractor interactor;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainPresenter</span><span class="params">(MainView view, GetNewsInteractor interactor)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.view = view;</div><div class="line">        <span class="keyword">this</span>.interactor = interactor;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Dependency-Injection"><a href="#Dependency-Injection" class="headerlink" title="Dependency Injection"></a>Dependency Injection</h2><p><code>GetNewsInteractor</code> needs to be provided to <code>MainPresenter</code> by its <em>Module</em>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainModule</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MainView view;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainModule</span><span class="params">(MainView view)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.view = view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function"><span class="keyword">public</span> GetNewsInteractor <span class="title">provideInteractor</span><span class="params">(GeonetService service)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GetNewsInteractor(service);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MainPresenter <span class="title">providePresenter</span><span class="params">(GetNewsInteractor interactor)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MainPresenter(view, interactor);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>MainPresenter</code> is injected with <code>GetNewsInteractor</code>. But to be able to inject <code>GeonetService</code> to <code>GetNewsInteractor</code> we need to convert <code>MainComponent</code> into a <em>Subcomponent</em> of <code>ApplicationComponent</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Subcomponent</span> (modules = MainModule.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MainComponent</span> <span class="keyword">extends</span> <span class="title">AndroidInjector</span>&lt;<span class="title">MainFragment</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Subcomponent</span>.Builder</div><div class="line">    <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> <span class="keyword">extends</span> <span class="title">AndroidInjector</span>.<span class="title">Builder</span>&lt;<span class="title">MainFragment</span>&gt; </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>We need to provide an injector for our <em>Fragment</em>. Let’s create a module for that which <code>ApplicationComponent</code> can use:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span>(subcomponents = MainComponent.class)</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">InjectorsModule</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Binds</span></div><div class="line">    <span class="meta">@IntoMap</span></div><div class="line">    <span class="meta">@FragmentKey</span>(MainFragment.class)</div><div class="line">    <span class="keyword">abstract</span> AndroidInjector.Factory&lt;? extends Fragment&gt; mainFragmentInjector(MainComponent.Builder builder);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Also, we want <code>GeonetService</code> to be available throughout the application. Let’s create a Module to provide it.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationModule</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Gson <span class="title">provideGson</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GsonBuilder().setDateFormat(<span class="string">"yyyy-MM-dd'T'HH:mm:ssz"</span>).create();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Retrofit <span class="title">provideRetrofit</span><span class="params">(Gson gson)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">                .baseUrl(<span class="string">"http://api.geonet.org.nz/"</span>)</div><div class="line">                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</div><div class="line">                .addConverterFactory(GsonConverterFactory.create(gson))</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function"><span class="keyword">public</span> GeonetService <span class="title">provideGeonetService</span><span class="params">(Retrofit retrofit)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> retrofit.create(GeonetService.class);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Next, we need to expose the injector and the service through the application’s <em>Component</em>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Singleton</span></div><div class="line"><span class="meta">@Component</span>(modules = &#123;</div><div class="line">        ApplicationModule.class,</div><div class="line">        AndroidInjectionModule.class,</div><div class="line">        InjectorsModule.class</div><div class="line">&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationComponent</span> <span class="keyword">extends</span> <span class="title">AndroidInjector</span>&lt;<span class="title">MyApplication</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Component</span>.Builder</div><div class="line">    <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> <span class="keyword">extends</span> <span class="title">AndroidInjector</span>.<span class="title">Builder</span>&lt;<span class="title">MyApplication</span>&gt; </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>In order to make the <code>ApplicationComponent</code> available throughout our application, we need to build it when the Application is created.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> <span class="keyword">implements</span> <span class="title">HasSupportFragmentInjector</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    DispatchingAndroidInjector&lt;Fragment&gt; fragmentDispatchingAndroidInjector;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        DaggerApplicationComponent.builder().create(<span class="keyword">this</span>).inject(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> AndroidInjector&lt;Fragment&gt; <span class="title">supportFragmentInjector</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> fragmentDispatchingAndroidInjector;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Don’t forget to add <code>MyApplication</code> as the <code>name</code> attribute of the <code>application</code> element in <code>AndroidManifest.xml</code>.</p>
<p>Finally, we need to update <code>MainFragment</code> so it is injected by the appropriate injector.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> <span class="keyword">implements</span> <span class="title">MainView</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    MainPresenter presenter;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        AndroidSupportInjection.inject(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">super</span>.onAttach(context);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>At this stage, <code>MainPresenter</code> can communicate with <code>MainView</code> and <code>GetNewsInteractor</code>. In an <a href="http://soflete.github.io/2017/07/01/Android-Unit-Testing-Presenters/">upcoming example</a> I will explain how I apply <em>Test Driven Development (TDD)</em> to define the behavior of the <code>MainPresenter</code> while I write a full set of Unit Tests for it.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In a &lt;a href=&quot;http://soflete.github.io/2017/07/01/Android-MVP-with-Dagger/&quot;&gt;previous article&lt;/a&gt; I described how to structure your applic
    
    </summary>
    
    
      <category term="MVP" scheme="http://soflete.github.io/tags/MVP/"/>
    
      <category term="Retrofit" scheme="http://soflete.github.io/tags/Retrofit/"/>
    
      <category term="RxJava" scheme="http://soflete.github.io/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Android: MVP with Dagger</title>
    <link href="http://soflete.github.io/2017/07/01/Android-MVP-with-Dagger/"/>
    <id>http://soflete.github.io/2017/07/01/Android-MVP-with-Dagger/</id>
    <published>2017-07-01T02:44:01.000Z</published>
    <updated>2017-07-01T06:00:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>The <em>Model-View-Presenter</em> pattern for software architecture helps to separate concerns in an application. In this article I intend to show you how I apply this pattern by using <a href="http://google.github.io/dagger/" target="_blank" rel="external">Dagger</a> for dependency injection.</p>
<p>First, we need to add the Dagger dependencies to our project:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="comment">// Dagger</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.google.dagger:dagger:2.11'</span></div><div class="line">    annotationProcessor <span class="string">'com.google.dagger:dagger-compiler:2.11'</span></div><div class="line"></div><div class="line">    <span class="comment">// Dagger Android</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.google.dagger:dagger-android:2.11'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.google.dagger:dagger-android-support:2.11'</span></div><div class="line">    annotationProcessor <span class="string">'com.google.dagger:dagger-android-processor:2.11'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Let’s now create a an empty interface to define our View:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MainView</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Next, let’s create a concrete implementation of our Presenter which will hold a reference to the View:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainPresenter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MainView view;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainPresenter</span><span class="params">(MainView view)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.view = view;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>In order to allow Dagger to create an instance of the Presenter which uses the Fragment as its View, we need to create an abstract module:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MainModule</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Binds</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> MainView <span class="title">mainView</span><span class="params">(MainFragment fragment)</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MainPresenter <span class="title">mainPresenter</span><span class="params">(MainView view)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MainPresenter(view);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Let’s create a Component that references our Module and is able to inject our Fragment:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(modules = &#123;</div><div class="line">        AndroidSupportInjectionModule.class,</div><div class="line">        MainModule.class</div><div class="line">&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MainComponent</span> <span class="keyword">extends</span> <span class="title">AndroidInjector</span>&lt;<span class="title">MainFragment</span>&gt; </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Component</span>.Builder</div><div class="line">    <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> <span class="keyword">extends</span> <span class="title">AndroidInjector</span>.<span class="title">Builder</span>&lt;<span class="title">MainFragment</span>&gt; </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Finally, we need to build our component and inject our Fragment:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> <span class="keyword">implements</span> <span class="title">MainView</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    MainPresenter presenter;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="comment">// Before adding the following line, build your project.</span></div><div class="line">        DaggerMainComponent.builder().create(<span class="keyword">this</span>).inject(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">super</span>.onAttach(context);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Now <code>MainFragment</code> is ready to delegate all its events to <code>MainPresenter</code> and rely on it to retrieve data from the <em>Model</em>. The <em>Presenter</em> will make any decisions on how and when to update the View.</p>
<p>In my <a href="http://soflete.github.io/2017/07/01/Interactors-with-Retrofit-and-RxJava/">next article</a> I explain how to create an <em>Interactor</em> to retrieve data from an API and pass it on to the <em>Presenter</em>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The &lt;em&gt;Model-View-Presenter&lt;/em&gt; pattern for software architecture helps to separate concerns in an application. In this article I inten
    
    </summary>
    
    
      <category term="Android" scheme="http://soflete.github.io/tags/Android/"/>
    
      <category term="MVP" scheme="http://soflete.github.io/tags/MVP/"/>
    
      <category term="Dagger" scheme="http://soflete.github.io/tags/Dagger/"/>
    
  </entry>
  
</feed>
